/*
 * test_btreepmacc5.cpp
 *
 *  Created on: 8 Feb 2018
 *      Author: Dean De Leo
 */

#include <climits>

#define CATCH_CONFIG_MAIN
#include "third-party/catch/catch.hpp"

#include "pma/driver.hpp"
#include "pma/btree/btreepmacc5.hpp"

using namespace pma;
using namespace std;


// copy & paste from test_static_abtree.cpp
TEST_CASE("sanity"){
    initialise();

    auto driver0 = make_shared<BTreePMACC5>(8);
    REQUIRE(driver0->size() == 0);
    driver0->insert(1, 10);
    driver0->insert(3, 30);
    driver0->insert(2, 20);
    driver0->insert(4, 40);
    driver0->insert(5, 50);
    driver0->insert(6, 60);
    driver0->insert(10, 100);
    driver0->insert(11, 110);
    driver0->insert(9, 90);
    REQUIRE(driver0->size() == 9);

    auto it = driver0->iterator();
    int64_t prev = -1;
    while(it->hasNext()){
        auto p = it->next();
        REQUIRE(prev < p.first);
        prev = p.first;
    }

    for(int64_t i = 0; i <= 12; i++){
        auto res = driver0->find(i);
        // Elements 1, 2, 3, 4, 5, 6, 9, 10, 11 are present and should be found
        if((i >= 1 && i <= 6) || (i >= 9 && i <= 11)){
            REQUIRE(res == i * 10);
        } else {
            REQUIRE(res == -1);
        }
    }
}

// copy & paste from test_static_abtree.cpp
TEST_CASE("find_range_dense"){
    initialise();

    constexpr size_t sz = 344; // 7 * 7 * 7 + 1

    pma::BTreePMACC5 B{8};
    for(int i = 1; i <= sz; i++){
        B.insert(i, i * 100);
    }
    REQUIRE(B.size() == sz);

    for(int i = 0; i <= B.size() +1; i++){
        for(int j = i; j <= B.size() +1; j++){
            auto it = B.find(i,j);
            int64_t min = -1, max = -1;
            if(it->hasNext()) min = max = it->next().first;
            while(it->hasNext()) max = it->next().first;

//            cout << "find(" << i << ", " << j << ") min: " << min << ", max: " << max << endl;

            // check min
            if(i == 0) {
                if(j == 0){
                    REQUIRE(min == -1);
                } else {
                    REQUIRE(min == 1);
                }
            } else if (i > B.size()){ // as the first case
                REQUIRE(min == -1);
            } else {
                REQUIRE(min == i);
            }

            // check max
            if(i == 0 && j == 0){
                REQUIRE(max == -1);
            } else if (j > B.size()){
                if(i > B.size()){ // as the first case
                    REQUIRE(max == -1);
                } else {
                    REQUIRE(max == B.size());
                }
            } else {
                REQUIRE(max == j);
            }
        }
    }

}

// copy & paste from test_static_abtree.cpp
TEST_CASE("find_range_with_gaps"){
    initialise();

    constexpr size_t sz = 344; // 7 * 7 * 7 + 1

    pma::BTreePMACC5 B{8};
    for(int i = 1; i <= sz; i++){
        B.insert(2 * i, 2 * i * 100);
    }
    REQUIRE(B.size() == sz);

    for(int i = 0; i <= 2 * B.size() +1; i++){
        for(int j = i; j <= 2 * B.size() +1; j++){
            auto it = B.find(i,j);
            int64_t min = -1, max = -1;
            if(it->hasNext()) min = max = it->next().first;
            while(it->hasNext()) max = it->next().first;

//            cout << "find(" << i << ", " << j << ") min: " << min << ", max: " << max << endl;

            // check min
            if(i == 0) {
                if(j < 2){
                    REQUIRE(min == -1);
                } else {
                    REQUIRE(min == 2);
                }
            } else if (i > 2 * B.size()){ // as the first case
                REQUIRE(min == -1);
            } else {
                if (i % 2 == 0){
                    REQUIRE(min == i);
                } else if ( i == j ) { // find(x, x) with x odd
                    REQUIRE(min == -1);
                } else { // find( 2*k -1, y ) implies min == 2*k
                    REQUIRE(min == i+1);
                }
            }

            // check max
            if(j < 2){ // 2 is the first key
                REQUIRE(max == -1);
            } else if ( i > 2 * B.size() ){ // as above
                REQUIRE(max == -1);
            } else if ( j > 2 * B.size() ){ // scan [i, 2 * B.size()] with i <= 2 * B.size()
                REQUIRE(max == 2 * B.size());
            } else if ( j % 2 == 0 ) { // j is in the interval of the B+Tree [min,max] and is even
                REQUIRE(max == j);
            } else if ( i == j ) { // both i && j are odd, i.e. find (x,x)
                REQUIRE(max == -1);
            } else { // j is odd, but i is even and i < j
                REQUIRE(max == j -1);
            }
        }
    }
}

// copy & paste from test_static_abtree.cpp
TEST_CASE("duplicates"){
    initialise();

    BTreePMACC5 btree{8};

    // insert the elements
    size_t cardinality = 0;
    for(size_t i = 0; i < 8; i++){
        btree.insert(2, 200 + i);
        cardinality++;
    }
    for(size_t i = 0; i < 32; i++){
        btree.insert(1, 100 + i);
        cardinality++;
    }
    for(size_t i = 0; i < 3; i++){
        btree.insert(4, 400 + i);
        cardinality++;
    }
    btree.insert(3, 300); cardinality++;
    for(size_t i = 0; i < 64; i++){
        btree.insert(5, 500 + i);
        cardinality++;
    }
    REQUIRE(btree.size() == cardinality);

    { // check all elements have been inserted!
        size_t index = 0;
        int64_t previous = -1;
        auto it = btree.iterator();
        while(it->hasNext()){
            auto p = it->next();
            REQUIRE(p.first >= previous);
            previous = p.first;
            index++;
        }
        REQUIRE(btree.size() == index);
    }

    { // search the 3 elements with key = 4
        auto it = btree.find(4, 4);
        size_t index = 0;
        while(it->hasNext()){
            auto p = it->next();
            REQUIRE(p.first == 4);

            index++;
        }
        REQUIRE(index == 3);
    }

    { // search the 4 elements with keys = 3, 4
        auto it = btree.find(3, 4);
        size_t index = 0;
        while(it->hasNext()){
            auto p = it->next();
            bool check = p.first == 3 || p.first == 4;
            REQUIRE(check);
            index++;
        }
        REQUIRE(index == 4);
    }

    { // search the 40 elements with keys = 1, 2
        auto it = btree.find(1, 2);
        size_t index = 0;
        while(it->hasNext()){
            auto p = it->next();
            bool check = p.first == 1 || p.first == 2;
            REQUIRE(check);
            index++;
        }
        REQUIRE(index == 40);
    }

    { // search the 64 elements with key = 5
        auto it = btree.find(5, 5);
        size_t index = 0;
        while(it->hasNext()){
            auto p = it->next();
            REQUIRE(p.first == 5);
            REQUIRE(p.second >= 500);
            REQUIRE(p.second < 600);
            index++;
        }
        REQUIRE(index == 64);
    }
}

// copy & paste from test_static_abtree.cpp
TEST_CASE("find_range_with_duplicates"){
    initialise();

    constexpr size_t num_duplicates = 100;
    constexpr size_t num_keys = 17;
    BTreePMACC5 tree{16};

    for(int i = 0; i < num_duplicates; i++){
        for(int j = 0; j < num_keys; j++){
            tree.insert(j, j * 100 + i);
        }
    }

    for(int j = 0; j < num_keys; j++){
        auto it = tree.find(j,j);
        auto sum = 0;
        while(it->hasNext()){
            auto e = it->next();
            REQUIRE(e.first == j);
            REQUIRE(e.second / 100 == j);
            sum++;
        }
        REQUIRE(sum == num_duplicates);
    }
}


TEST_CASE("delete"){
    initialise();
    BTreePMACC5 tree{8};
    size_t sz = 512;

    REQUIRE(tree.empty());
    for(int i = 1; i <= sz; i++){
        tree.insert(i, i);
    }
    REQUIRE(tree.size() == sz);

    for(int i = 32; i < 64; i++){
        auto value = tree.remove(i);
        REQUIRE(value == i);
    }
    sz -= 32;
    REQUIRE(tree.size() == sz);

    for(int i = 256; i> 128; i--){
        auto value = tree.remove(i);
        REQUIRE(value == i);
        // search again the element removed and its neighbours
        REQUIRE(tree.find(i) == -1);
        if(i < 256){ REQUIRE(tree.find(i +1) == -1); }
        REQUIRE(tree.find(i-1) == (i-1));
    }
    sz -= 128;
    REQUIRE(tree.size() == sz);

    for(int i = 256; i > 128; i--){
        tree.insert(i, i);
    }
    sz += 128;
    REQUIRE(tree.size() == sz);

    for(int i = 1; i <= 512; i++){
        auto v = tree.remove(i);
        if( i >= 32 && i < 64){
            REQUIRE(v == -1);
        } else {
            REQUIRE(v == i);
        }
    }
    REQUIRE(tree.size() == 0);
    REQUIRE(tree.empty());

    // Again re-insert the elements
    sz = 512;
    for(size_t i = sz; i >= 1; i--){
        tree.insert(i, i);
    }
    REQUIRE(tree.size() == 512);
    for(size_t i = sz; i>= 1; i--){
        REQUIRE(tree.find(i) == i);
        auto v = tree.remove(i);
        REQUIRE(v == i);
        REQUIRE(tree.find(i) == -1);
    }
    REQUIRE(tree.size() == 0);
    REQUIRE(tree.empty());
}

TEST_CASE("reverse_insert"){
    initialise();
    BTreePMACC5 tree{8};
    int sz = 4096;

    for(int i = sz; i > 0; i--){
        tree.insert(i, i * 100);
    }
    REQUIRE(tree.size() == sz);

    for(int key = 1; key <= sz; key++){
        auto value = tree.find(key);
        REQUIRE(value == key * 100);
    }
}

TEST_CASE("bulk_loading_sanity"){
    initialise();
    BTreePMACC5 tree {8};

    // random permutation of 35 elements, from the sequence [1, 35]
    int64_t sample[] = {26, 13, 6, 30, 15, 12, 34, 31, 4, 2, 28, 14, 7, 25, 10, 29, 21, 24,
            19, 20, 22, 5, 3, 11, 8, 16, 23, 1, 9, 18, 17, 35, 33, 32, 27};
    constexpr size_t sample_sz = sizeof(sample) / sizeof(sample[0]);
    constexpr size_t batch_sz = 5;
    static_assert(sample_sz % batch_sz == 0, "The data size should be a multiple of the batch size");
    std::pair<int64_t, int64_t> batch[batch_sz];

    for(size_t i = 0; i < sample_sz / batch_sz; i++){
        for(size_t j = 0; j < batch_sz; j++){
            int64_t key = sample[i * batch_sz + j];
            batch[j].first = key;
            batch[j].second = key * 100;
        }

        tree.load(batch, batch_sz);
        REQUIRE(tree.size() == batch_sz * (i+1));
    }

    // validate that all elements have been inserted
    REQUIRE(tree.size() == sample_sz);
    for(size_t key = 1; key <= sample_sz; key++){
        auto value = tree.find(key);
        REQUIRE(value == key * 100);
    }

}

TEST_CASE("bulk_loading_full"){
    initialise();
    BTreePMACC5 tree {16};

    // random permutation of 2387 elements, from the sequence [1, 2387]. Note 31 * 77 = 2387.
    int64_t sample[] = {1633, 823, 253, 2261, 1861, 2286, 1214, 819, 2931, 3337, 2074, 2511,
            2025, 547, 2408, 774, 931, 968, 835, 2890, 2392, 1014, 1491, 2041,
            2254, 3576, 2768, 1159, 1296, 3315, 1961, 1820, 2052, 1485, 1046,
            2954, 2, 392, 3122, 132, 3140, 3022, 763, 522, 3493, 3512, 1576,
            2165, 1988, 1745, 1088, 1379, 1781, 2752, 3587, 2427, 731, 3521,
            1435, 1703, 2923, 773, 300, 780, 553, 3165, 269, 3415, 1016, 4, 2082,
            1747, 1426, 3380, 1160, 1428, 2412, 2498, 1549, 2552, 1623, 3038,
            926, 1690, 2323, 61, 3553, 853, 2779, 3590, 2803, 2517, 3336, 1260,
            550, 174, 1380, 2785, 1722, 287, 88, 1967, 659, 2005, 152, 1645,
            1089, 3162, 179, 1888, 3175, 1569, 2164, 3490, 1476, 3201, 1107,
            1013, 997, 2886, 2875, 117, 309, 1467, 44, 2566, 208, 3281, 658, 8,
            1627, 889, 110, 1946, 3398, 671, 2071, 567, 1469, 941, 3354, 2701,
            3349, 1837, 2451, 1037, 3352, 1631, 1748, 638, 153, 3244, 2135, 2751,
            1194, 343, 326, 2384, 1636, 2811, 54, 1200, 705, 1867, 3562, 81,
            2735, 1095, 883, 3243, 3017, 2696, 138, 2795, 1751, 2670, 2260, 2889,
            2774, 1893, 74, 3158, 2832, 2978, 2215, 460, 2334, 3484, 183, 779,
            3334, 2761, 608, 920, 1450, 959, 1671, 1700, 2253, 427, 2645, 3134,
            2848, 1168, 2805, 15, 1340, 446, 2671, 1300, 2822, 2754, 1466, 1082,
            2906, 359, 250, 1959, 5, 39, 2648, 3041, 320, 2376, 228, 495, 1290,
            1705, 457, 1185, 121, 2182, 2452, 2980, 649, 266, 2348, 1266, 1211,
            339, 2536, 1161, 2895, 254, 26, 908, 1400, 1739, 1517, 884, 469,
            1248, 535, 270, 2116, 3299, 1030, 1273, 3508, 1774, 1145, 2631, 1546,
            3355, 1158, 2880, 1410, 907, 2550, 2845, 3324, 3232, 421, 2651, 924,
            2662, 3560, 2591, 1173, 3381, 3213, 1653, 952, 1238, 2659, 325, 3409,
            574, 2734, 237, 1805, 1950, 2020, 2161, 213, 2372, 2454, 2605, 2209,
            861, 128, 379, 674, 3510, 3272, 2470, 242, 3170, 750, 3126, 2606,
            3208, 1845, 2613, 1528, 1, 549, 852, 3371, 1507, 2338, 2037, 2139,
            1786, 2300, 918, 2502, 1765, 3120, 1646, 2828, 3446, 1000, 874, 1359,
            442, 3031, 657, 1568, 1225, 1934, 143, 2577, 3539, 2958, 3430, 2124,
            2437, 2646, 328, 1235, 914, 412, 500, 1670, 596, 2775, 727, 1259,
            758, 3085, 1074, 1017, 2011, 3414, 716, 3515, 2401, 3056, 1898, 728,
            2290, 366, 1908, 2373, 3522, 203, 1180, 480, 1139, 943, 1880, 771,
            2816, 2519, 2142, 1197, 2455, 2716, 52, 3231, 730, 1004, 3191, 231,
            2821, 2234, 1091, 3176, 1414, 1152, 3503, 2604, 3437, 3127, 1912,
            2414, 3552, 417, 1351, 1417, 416, 2559, 2238, 2366, 1744, 556, 2724,
            444, 2812, 2028, 3538, 3128, 3013, 2493, 890, 245, 2475, 3439, 3416,
            3139, 3427, 2892, 87, 2595, 3254, 2271, 2652, 2210, 1852, 1673, 3023,
            1020, 2177, 1441, 2368, 2310, 1538, 3434, 2728, 963, 2770, 1077,
            1090, 1009, 1083, 1246, 897, 363, 562, 1513, 2742, 3277, 2296, 664,
            1715, 1106, 2818, 507, 2974, 1972, 2840, 1920, 234, 2682, 2986, 538,
            1449, 1746, 14, 2379, 341, 927, 1584, 2339, 1442, 1080, 1752, 3438,
            1306, 564, 2702, 2793, 561, 736, 1699, 1125, 1040, 1790, 711, 1137,
            3465, 2491, 1674, 2748, 1316, 3234, 2569, 1665, 3536, 3544, 1875,
            2572, 2612, 483, 2494, 755, 2181, 1881, 185, 917, 2378, 2115, 29,
            2159, 690, 304, 1120, 3311, 2700, 473, 1063, 3379, 3262, 3076, 1817,
            20, 2982, 817, 1105, 2109, 2654, 3366, 2358, 1925, 587, 2341, 2242,
            302, 1547, 744, 1995, 1564, 2126, 1879, 2442, 2689, 855, 2786, 895,
            2171, 1530, 2180, 2516, 279, 274, 192, 1711, 1935, 3167, 293, 393,
            2450, 1024, 2449, 2872, 3187, 2227, 6, 3285, 919, 2624, 1230, 426,
            1658, 12, 1301, 1179, 1501, 2396, 1570, 740, 2431, 2553, 1788, 1924,
            337, 1305, 278, 1543, 396, 3255, 144, 3433, 362, 3095, 1263, 3115,
            625, 3279, 2962, 1057, 2924, 1479, 342, 1433, 1036, 3008, 21, 1244,
            1940, 3488, 3268, 1490, 3321, 1984, 22, 2114, 529, 2492, 1550, 719,
            3542, 354, 84, 2643, 2001, 2304, 1831, 2206, 1800, 3317, 157, 1836,
            1742, 1123, 3327, 1707, 2590, 1704, 327, 565, 3491, 2078, 277, 2632,
            360, 430, 2473, 1297, 280, 3061, 2217, 2208, 1405, 721, 2418, 539,
            2202, 644, 1990, 2318, 1175, 1571, 1755, 1980, 1542, 1858, 3036, 48,
            161, 2925, 2416, 2736, 1035, 3524, 1834, 2685, 1279, 258, 3368, 390,
            2425, 1015, 371, 2545, 397, 3062, 1108, 1117, 451, 1317, 3261, 1903,
            2570, 2033, 1365, 2527, 2087, 408, 916, 3577, 837, 733, 2844, 1591,
            2010, 1987, 1349, 481, 2144, 2083, 2276, 1913, 1342, 1352, 3572, 129,
            2653, 2476, 600, 3037, 1369, 3166, 3294, 826, 2757, 2394, 3528, 2556,
            1609, 2321, 2000, 60, 3270, 681, 1141, 2371, 1529, 1688, 1706, 1890,
            2583, 3088, 748, 693, 845, 432, 3006, 3148, 1101, 1034, 2829, 950,
            2065, 2973, 1772, 3442, 3044, 1626, 2642, 2237, 2333, 676, 2650,
            3259, 1124, 813, 2912, 1808, 618, 563, 1909, 1071, 2809, 3575, 1682,
            1651, 284, 2216, 2530, 798, 3537, 2773, 2582, 2021, 2903, 2971, 2999,
            1472, 1846, 9, 632, 3401, 1054, 35, 419, 3406, 1969, 1286, 3333, 37,
            660, 2499, 1709, 548, 869, 1572, 2782, 2099, 3567, 1782, 3005, 73,
            2355, 688, 2620, 1321, 145, 689, 434, 2150, 1174, 1272, 1202, 27,
            1367, 410, 1033, 1932, 351, 437, 1773, 2897, 2710, 2350, 1052, 3276,
            3288, 2738, 1650, 2130, 3357, 3100, 3593, 956, 2571, 1331, 707, 3589,
            703, 1097, 3184, 986, 3131, 1357, 3362, 1319, 2048, 3251, 3082, 949,
            1600, 3051, 2766, 1268, 1810, 1212, 772, 1541, 3271, 2581, 2175,
            1404, 979, 1630, 1552, 2187, 3469, 238, 2344, 424, 1264, 842, 2277,
            3179, 307, 2490, 2815, 799, 566, 1445, 3114, 2698, 955, 3050, 1510,
            2439, 2745, 2763, 249, 2956, 2280, 1844, 3301, 973, 2690, 524, 572,
            2313, 1420, 3509, 1583, 3449, 822, 464, 3225, 1070, 2997, 2200, 450,
            331, 1830, 1314, 1335, 2481, 2930, 673, 3199, 1219, 2479, 113, 579,
            2807, 958, 3067, 3009, 3574, 1188, 1186, 3241, 2301, 970, 616, 2103,
            1928, 3032, 944, 3168, 2327, 578, 3173, 1334, 757, 3408, 260, 120,
            2611, 756, 988, 947, 593, 2342, 2630, 2288, 3077, 3169, 2057, 2211,
            2365, 2825, 1915, 1841, 2555, 663, 551, 479, 885, 3052, 2361, 1759,
            1012, 2777, 1326, 1483, 2729, 1121, 271, 2369, 2315, 1270, 1619,
            1464, 30, 1419, 1471, 142, 1376, 2934, 844, 3123, 900, 3402, 1038,
            1580, 240, 2117, 3441, 2596, 2223, 1291, 3455, 1392, 2059, 139, 3591,
            1051, 2191, 244, 2189, 2798, 2948, 2639, 3151, 903, 3293, 1919, 754,
            1525, 475, 1694, 3505, 1726, 454, 3496, 3157, 462, 1787, 2110, 1251,
            2484, 2941, 1398, 1625, 982, 3520, 781, 848, 1783, 1193, 1596, 1511,
            489, 3194, 172, 612, 617, 2367, 3582, 735, 3091, 961, 509, 875, 865,
            624, 3303, 2820, 3586, 1166, 972, 2404, 1613, 140, 2909, 1672, 527,
            2292, 1816, 1983, 3264, 3399, 3258, 3410, 1727, 436, 2564, 400, 1087,
            3106, 2753, 1333, 3500, 2096, 2703, 1862, 1394, 130, 1475, 605, 745,
            1119, 2472, 805, 510, 1064, 687, 599, 1363, 1468, 471, 2320, 2767,
            2362, 3058, 2264, 3300, 1838, 1777, 1299, 2095, 1818, 386, 2102,
            2622, 2574, 1261, 2092, 105, 3453, 2506, 888, 1061, 2520, 361, 1336,
            1276, 1446, 2609, 2316, 3112, 2856, 2706, 1252, 374, 3529, 3432,
            2518, 2295, 3483, 792, 357, 3404, 154, 3394, 2983, 2086, 3419, 2756,
            2121, 2035, 512, 322, 2299, 2268, 2248, 2732, 3494, 1724, 3295, 2487,
            1462, 1500, 1590, 3053, 3042, 2207, 1413, 627, 2007, 2183, 2145,
            1839, 1578, 2244, 765, 1113, 3460, 2532, 3312, 210, 59, 431, 2932,
            2203, 3110, 712, 1883, 3550, 191, 1947, 315, 2922, 2647, 1611, 1868,
            2597, 589, 2275, 786, 984, 2629, 1128, 1780, 833, 118, 1294, 932,
            3250, 2871, 3444, 967, 2823, 1393, 544, 3125, 1311, 1320, 2259, 3256,
            2199, 24, 1463, 1198, 2247, 189, 197, 3014, 377, 1977, 385, 3385,
            2505, 2198, 1639, 1332, 1721, 1803, 170, 2935, 2992, 1661, 312, 1824,
            2981, 3540, 1896, 474, 3331, 2101, 2184, 697, 2584, 2914, 592, 2224,
            1386, 2835, 2106, 2898, 3443, 812, 2573, 3235, 1111, 1427, 332, 3108,
            1505, 1496, 3000, 1840, 16, 1255, 1241, 193, 3190, 3456, 569, 1440,
            954, 2281, 1509, 3069, 746, 241, 3080, 3089, 518, 122, 1725, 1993,
            2166, 1985, 532, 3489, 3181, 2459, 1461, 1162, 2382, 2916, 2094, 25,
            2523, 1278, 2830, 2539, 2546, 1526, 1285, 3533, 1657, 1964, 3492,
            1151, 832, 301, 1066, 1905, 940, 606, 2588, 2256, 1771, 662, 3486,
            2345, 1957, 2030, 2975, 2486, 794, 692, 830, 1907, 1112, 2075, 938,
            3393, 1100, 3071, 3153, 1116, 1031, 1181, 2730, 2100, 1730, 1877,
            2267, 1769, 3230, 604, 3105, 2679, 2236, 2251, 358, 1084, 2214, 2337,
            2435, 1002, 928, 1378, 2112, 840, 133, 23, 310, 1737, 588, 1944,
            1757, 1302, 2262, 2426, 1155, 78, 694, 2666, 2024, 2422, 1848, 586,
            2964, 870, 909, 2278, 1900, 732, 246, 2790, 3188, 1894, 3035, 3209,
            3018, 2429, 99, 3506, 3319, 520, 3118, 753, 3030, 1603, 2686, 1579,
            1418, 704, 880, 1892, 298, 669, 3133, 1842, 1979, 334, 1156, 3338,
            1199, 1048, 3196, 1992, 150, 1503, 2525, 1629, 3263, 3551, 3475,
            2888, 373, 1387, 1889, 575, 759, 1222, 1480, 1989, 3010, 3386, 1288,
            1904, 1257, 3215, 2865, 3504, 2235, 1656, 2141, 2197, 2787, 3160,
            1662, 800, 2153, 100, 3135, 3132, 686, 458, 3121, 1937, 925, 467,
            3075, 158, 945, 2797, 77, 1224, 1677, 1498, 1142, 2460, 598, 3238,
            365, 2936, 850, 3183, 201, 2665, 478, 1494, 1559, 1345, 124, 3448,
            2196, 1210, 2225, 196, 1045, 1177, 1347, 194, 388, 1624, 207, 3142,
            1873, 2325, 2060, 3578, 2302, 247, 939, 214, 1585, 186, 31, 653,
            3221, 1508, 1806, 2804, 1917, 2681, 785, 1373, 2232, 602, 2857, 2750,
            2737, 3186, 882, 633, 2996, 485, 135, 1178, 3220, 1293, 642, 3547,
            2858, 1835, 3163, 3592, 2270, 2868, 2069, 2157, 902, 3302, 1798, 285,
            235, 623, 3525, 1358, 1243, 1825, 1567, 2375, 499, 1887, 2568, 714,
            28, 1049, 355, 710, 1618, 2852, 2309, 2462, 2944, 2672, 2515, 626,
            3477, 3546, 1025, 966, 1999, 1422, 3320, 2294, 3025, 913, 2831, 3289,
            964, 1216, 1502, 2937, 2601, 3228, 2626, 2072, 849, 998, 3581, 782,
            1249, 1621, 594, 3063, 3556, 1348, 2160, 2185, 2693, 3499, 3459,
            1079, 2458, 1753, 263, 1430, 3531, 3519, 2548, 1043, 273, 10, 265,
            243, 1963, 2869, 3174, 180, 1344, 2423, 2747, 1792, 2794, 3564, 1902,
            1339, 2158, 115, 211, 894, 584, 2933, 790, 1643, 2468, 2722, 2917,
            2708, 1954, 2668, 251, 1164, 2495, 1562, 2600, 3412, 762, 738, 1086,
            1537, 2346, 456, 1804, 1170, 441, 2023, 2444, 2029, 1310, 1492, 2633,
            2212, 2283, 55, 3046, 631, 2044, 648, 465, 2966, 2089, 3211, 1616,
            1078, 1589, 2589, 1793, 577, 1512, 878, 3417, 1637, 935, 286, 1337,
            1068, 3377, 204, 1729, 3345, 3145, 3229, 2663, 3418, 3219, 2330, 348,
            11, 1615, 2284, 1734, 3066, 2919, 2678, 2363, 370, 2894, 702, 3322,
            2064, 2771, 2998, 2204, 3, 156, 305, 470, 2233, 709, 93, 1076, 2400,
            2240, 3011, 2192, 2712, 3097, 862, 2608, 3563, 3461, 1811, 607, 2541,
            684, 2547, 2649, 3350, 2560, 1298, 2143, 91, 1157, 1680, 2528, 857,
            1970, 536, 652, 1975, 3570, 1864, 2226, 2062, 2084, 560, 1973, 2952,
            1415, 2927, 2162, 3083, 222, 1195, 1545, 1006, 2535, 1396, 3543,
            1795, 275, 1588, 292, 1350, 3282, 1974, 112, 1133, 2258, 2834, 989,
            991, 2026, 3233, 1053, 2004, 108, 109, 3021, 1565, 3422, 2796, 487,
            2305, 3247, 3292, 3413, 224, 1936, 3240, 1019, 2746, 1968, 3064,
            1421, 2950, 1823, 775, 2904, 2644, 640, 1592, 1827, 2614, 1307, 1256,
            1303, 1918, 3568, 2755, 2859, 318, 766, 2667, 2578, 1495, 1312, 1136,
            1169, 3084, 3212, 2308, 2133, 1713, 3383, 2699, 2873, 1718, 2817,
            3588, 2466, 706, 2027, 2709, 859, 2772, 2721, 2230, 957, 2003, 921,
            409, 1797, 1497, 1226, 2461, 2336, 1997, 2374, 1982, 1857, 2874,
            1460, 83, 1315, 1796, 70, 2813, 1931, 167, 3316, 404, 1743, 788,
            1267, 2398, 1448, 1754, 306, 3129, 3594, 1524, 169, 3103, 3407, 2496,
            2489, 2050, 137, 2137, 1232, 200, 3047, 1384, 233, 406, 75, 856,
            1309, 3313, 2802, 3185, 2976, 349, 461, 65, 101, 76, 1237, 1566,
            2326, 1557, 2453, 2877, 2483, 867, 47, 125, 1516, 2219, 770, 2221,
            1607, 2943, 1408, 2928, 1026, 3535, 1203, 2433, 2413, 3117, 2311,
            3454, 2891, 1978, 3078, 1649, 151, 3012, 795, 3197, 494, 1802, 1856,
            1952, 1412, 2677, 2045, 3473, 1614, 1951, 3541, 3267, 2714, 1253,
            1072, 1756, 175, 3527, 515, 3487, 1381, 1287, 1731, 3152, 2428, 338,
            1213, 2960, 2243, 1281, 2862, 324, 45, 936, 2513, 1018, 166, 1325,
            3390, 2409, 3558, 691, 319, 1740, 2436, 877, 1221, 1032, 1574, 2995,
            2758, 2576, 1533, 1385, 248, 453, 1258, 2415, 3218, 1411, 1172, 1716,
            53, 1561, 1003, 2594, 3498, 614, 540, 1847, 2942, 162, 3245, 1474,
            163, 1227, 2537, 3054, 2070, 2012, 1130, 1575, 1313, 1595, 637, 1069,
            3073, 552, 1560, 403, 1681, 2066, 422, 680, 381, 340, 2760, 102,
            1432, 585, 2661, 3290, 1996, 1794, 1127, 951, 1519, 749, 3411, 3308,
            1876, 187, 1407, 80, 675, 2285, 2443, 554, 1233, 1190, 1822, 3376,
            904, 1855, 2349, 3016, 1735, 854, 3141, 38, 2656, 1047, 2111, 2054,
            346, 1582, 1368, 1843, 683, 1438, 476, 2154, 111, 1204, 1960, 2610,
            558, 3382, 3359, 2501, 504, 534, 2073, 1686, 86, 1065, 661, 2447,
            3275, 435, 3463, 369, 1283, 3332, 871, 448, 2593, 3330, 1451, 1308,
            2563, 2405, 2740, 2353, 2592, 218, 3146, 2385, 1599, 1869, 429, 3482,
            103, 2951, 1884, 32, 1768, 3278, 1882, 43, 525, 3029, 2480, 3502,
            3428, 1784, 810, 2176, 1138, 836, 282, 1910, 104, 1153, 58, 1029,
            226, 3227, 930, 3374, 2467, 1477, 345, 825, 1714, 3224, 2876, 1761,
            413, 3530, 1366, 590, 784, 2465, 68, 136, 3204, 1598, 3526, 715,
            3189, 2987, 2907, 3206, 2969, 1154, 2136, 1265, 1710, 1144, 1733,
            330, 2657, 490, 987, 1176, 811, 803, 1231, 2744, 3223, 809, 262, 428,
            980, 3198, 1206, 1683, 2861, 1814, 1361, 178, 2463, 808, 573, 3458,
            2638, 1377, 899, 2105, 2090, 1939, 1277, 3045, 737, 347, 1506, 3403,
            1610, 3391, 3346, 42, 1717, 2331, 2503, 3070, 2058, 414, 3116, 438,
            2723, 2669, 1021, 3180, 2968, 1554, 2430, 1007, 628, 1723, 383, 530,
            3335, 3144, 3001, 1240, 106, 831, 2017, 160, 2959, 1602, 2826, 1689,
            227, 2351, 1991, 2061, 1799, 3516, 1612, 3485, 3480, 2970, 1093,
            2664, 1514, 395, 3450, 1459, 2402, 1666, 267, 3065, 2123, 496, 2040,
            2780, 2881, 1684, 3507, 743, 2229, 2655, 1056, 1640, 2908, 3107,
            1245, 1628, 2287, 2093, 912, 645, 291, 2042, 2469, 2107, 3549, 2688,
            922, 64, 1943, 1262, 701, 2038, 1779, 41, 2131, 2806, 1563, 580,
            2134, 2148, 929, 3286, 974, 1678, 2789, 230, 2009, 3124, 411, 1292,
            1324, 700, 387, 1606, 402, 2945, 353, 717, 1695, 190, 1874, 3200,
            2776, 665, 2762, 3370, 3086, 2955, 1587, 2079, 1103, 1770, 863, 2749,
            1406, 2558, 1886, 168, 2507, 2512, 2684, 3397, 3559, 3019, 1906,
            2692, 523, 3584, 2526, 2715, 1092, 323, 3248, 2478, 1553, 3287, 296,
            1767, 2713, 3079, 1617, 603, 2860, 2068, 613, 1949, 2146, 2963, 2140,
            3033, 2471, 3161, 3373, 2562, 2694, 1930, 1304, 276, 2039, 1207, 846,
            2841, 2343, 1778, 1362, 378, 1692, 2707, 3388, 79, 2900, 215, 85,
            742, 937, 1749, 2883, 3099, 2618, 173, 177, 2352, 1060, 1728, 3214,
            2836, 1758, 89, 2419, 2827, 2636, 3429, 2014, 965, 147, 595, 1409,
            2967, 2335, 3514, 1499, 747, 2879, 2485, 415, 3304, 3365, 1593, 2357,
            2554, 3164, 1250, 2364, 3360, 1813, 364, 568, 107, 1850, 3003, 3457,
            236, 2961, 2994, 3119, 3143, 2623, 3548, 1766, 1254, 1764, 1001,
            1522, 1981, 3057, 2245, 1452, 3343, 2186, 636, 2850, 1962, 329, 1183,
            1341, 3555, 1488, 1182, 2719, 3273, 1955, 3266, 149, 3523, 2190,
            2551, 2104, 2173, 1958, 2616, 1191, 2863, 1826, 1859, 993, 818, 3358,
            3340, 2053, 3569, 2704, 828, 1660, 978, 2853, 583, 678, 49, 3249,
            923, 3222, 666, 2252, 3081, 526, 2129, 2837, 2587, 2228, 559, 1327,
            2882, 2905, 1536, 1109, 769, 252, 655, 3004, 2660, 1102, 682, 1042,
            372, 646, 2824, 1008, 2792, 3040, 814, 3425, 182, 2246, 2477, 3554,
            1504, 2399, 2397, 570, 807, 314, 1338, 3090, 455, 3059, 3207, 439,
            557, 1104, 868, 2575, 2864, 1763, 3284, 2814, 1642, 1597, 3171, 1217,
            497, 3452, 1115, 2381, 1870, 205, 3426, 299, 1520, 3060, 1821, 873,
            1397, 2510, 827, 1865, 2938, 2047, 2420, 3113, 2213, 2178, 491, 1760,
            1425, 797, 2122, 934, 1131, 3309, 541, 3138, 264, 3072, 1044, 3474,
            2324, 975, 1196, 2783, 1669, 1247, 806, 3580, 3007, 1129, 7, 3216,
            3400, 3451, 2043, 3566, 2359, 2088, 290, 2168, 2627, 1534, 2055,
            3571, 2726, 1635, 3367, 2674, 3306, 1215, 1540, 95, 962, 841, 206,
            3192, 2298, 1853, 528, 217, 1663, 2194, 3104, 1149, 2565, 1096, 2432,
            2791, 1205, 2993, 838, 571, 1527, 1456, 2915, 3565, 1284, 2383, 3471,
            2031, 2810, 440, 3329, 1878, 2579, 2120, 2002, 1927, 1318, 389, 977,
            2585, 3421, 2985, 2619, 581, 1470, 97, 1094, 188, 1933, 2314, 1696,
            734, 1098, 698, 1828, 3356, 1652, 232, 384, 2085, 2303, 1926, 1897,
            1866, 477, 906, 3314, 514, 2391, 1371, 3150, 2132, 1041, 816, 3495,
            2091, 2239, 316, 2533, 2448, 2446, 459, 1647, 96, 1010, 468, 394,
            3440, 1701, 3342, 493, 405, 1484, 2125, 288, 1698, 3156, 1005, 2147,
            643, 1356, 1622, 860, 289, 2464, 181, 1885, 896, 1604, 2032, 677,
            839, 3585, 2395, 1165, 311, 2500, 229, 2332, 1114, 2839, 2781, 3445,
            994, 3182, 650, 2390, 114, 517, 3094, 2838, 2913, 1532, 3092, 2778,
            739, 391, 3389, 3159, 259, 2896, 1122, 1011, 433, 864, 1789, 184,
            1147, 1271, 2988, 1942, 1402, 641, 303, 256, 352, 2673, 3532, 3518,
            94, 516, 3583, 1388, 3517, 425, 482, 1473, 1163, 2152, 2854, 3596,
            1941, 1295, 3202, 1023, 3372, 2274, 2347, 2634, 1872, 3236, 1242,
            1548, 789, 2156, 2720, 1605, 1573, 1146, 295, 1762, 382, 2266, 2801,
            2658, 3149, 2403, 3431, 1608, 2434, 3237, 1389, 2718, 582, 2531, 815,
            2847, 3087, 3363, 1275, 3545, 272, 2843, 985, 134, 2705, 283, 834,
            531, 418, 3476, 1586, 905, 2340, 1685, 3347, 3361, 3026, 1399, 1531,
            2784, 3348, 3557, 1521, 3049, 1269, 308, 2306, 521, 2291, 891, 2680,
            1383, 1832, 1075, 761, 2899, 297, 2118, 1236, 2388, 1148, 335, 2149,
            1370, 2179, 3203, 2265, 537, 3466, 893, 1486, 2386, 1167, 2049, 1234,
            3423, 892, 847, 656, 1487, 1431, 2586, 1601, 2307, 313, 1809, 2901,
            969, 1423, 546, 2842, 198, 1343, 1741, 2354, 2947, 3501, 2222, 2406,
            898, 1620, 1775, 2457, 695, 1478, 1668, 866, 398, 751, 879, 2356,
            2080, 449, 3378, 995, 1493, 953, 165, 2893, 1328, 3147, 876, 1209,
            654, 1424, 1390, 1208, 2522, 502, 2417, 2377, 2218, 2603, 1280, 1457,
            155, 2833, 1189, 804, 1655, 2170, 1638, 542, 3111, 2249, 1849, 19,
            2169, 2255, 960, 668, 1330, 3137, 34, 1901, 2990, 533, 3260, 2322,
            1110, 1976, 3472, 2508, 2953, 545, 212, 1455, 62, 2205, 1791, 802,
            1403, 2474, 2127, 488, 3068, 2497, 696, 2940, 257, 1360, 3177, 778,
            56, 1443, 2034, 2549, 261, 2538, 1667, 1634, 3479, 3468, 519, 915,
            3396, 1187, 505, 176, 1067, 1354, 2282, 3573, 3210, 71, 630, 2939,
            1027, 2297, 1453, 1738, 768, 1860, 2884, 2926, 356, 3420, 2195, 3269,
            2022, 3195, 597, 119, 622, 752, 92, 821, 1558, 3298, 1454, 2920, 634,
            1687, 2056, 2717, 1895, 1184, 50, 886, 2317, 2846, 2675, 1171, 2695,
            1871, 1851, 1641, 1059, 2273, 2741, 1220, 1966, 3015, 651, 1632,
            2155, 783, 621, 1135, 2534, 159, 2036, 3310, 911, 1437, 1659, 452,
            2580, 2557, 1126, 708, 3096, 2691, 498, 901, 1140, 376, 466, 221,
            126, 2108, 729, 1218, 2046, 887, 3027, 3424, 2628, 2676, 685, 116,
            722, 2885, 2008, 3283, 1329, 2293, 1679, 1929, 1691, 3172, 667, 69,
            220, 3481, 2488, 40, 1693, 131, 1555, 3447, 2438, 610, 3257, 3470,
            321, 1382, 2421, 2257, 3497, 2077, 3297, 13, 1081, 3579, 492, 3328,
            3384, 2013, 1654, 1720, 399, 1539, 2731, 3318, 767, 983, 3344, 1965,
            3364, 609, 672, 858, 2788, 2984, 3002, 1223, 2739, 2625, 3098, 1648,
            2957, 1073, 1323, 3253, 2567, 760, 1819, 2972, 2289, 996, 629, 501,
            2599, 1416, 3435, 2764, 2250, 2769, 2598, 463, 127, 2979, 1956, 123,
            1712, 2991, 407, 1391, 1132, 1518, 3478, 3043, 281, 1953, 3464, 420,
            317, 2119, 2683, 3024, 1289, 336, 63, 1998, 3353, 3109, 2621, 543,
            2607, 725, 2544, 2167, 1436, 3513, 268, 1444, 2870, 2808, 1050, 2851,
            1201, 3369, 990, 443, 741, 141, 2329, 1556, 1523, 2279, 1697, 2067,
            2063, 1372, 2231, 3242, 3130, 90, 486, 801, 18, 2174, 1482, 2188,
            1143, 726, 3280, 1489, 3048, 1815, 2849, 3217, 1732, 3296, 2524,
            1465, 1429, 3339, 2328, 202, 942, 2529, 3375, 2220, 445, 1028, 66,
            933, 2561, 3205, 2081, 2855, 776, 1229, 1192, 787, 3154, 1355, 647,
            2393, 611, 1322, 344, 1346, 239, 999, 3341, 164, 910, 2918, 2312,
            2380, 843, 294, 2151, 2866, 829, 2193, 2018, 2076, 1916, 2697, 2456,
            98, 2172, 447, 199, 2929, 33, 1807, 1948, 1515, 1719, 333, 723, 670,
            3034, 1921, 3039, 1994, 3326, 508, 3467, 1664, 3561, 724, 3291, 1829,
            793, 3511, 2949, 1062, 1039, 506, 1971, 2051, 57, 1945, 620, 2504,
            2370, 2424, 1134, 1395, 1675, 2411, 3392, 619, 171, 46, 3252, 1434,
            3265, 3102, 555, 3093, 2319, 209, 1750, 2410, 3274, 1058, 1401, 2965,
            472, 1439, 1374, 992, 2407, 1447, 2910, 2887, 2602, 2687, 2113, 3193,
            1239, 2241, 2725, 591, 3136, 223, 2617, 67, 2989, 2819, 3387, 796,
            255, 881, 2019, 2201, 764, 1353, 1364, 225, 2521, 2097, 2765, 1854,
            3101, 3307, 2441, 513, 872, 1708, 1863, 3534, 1282, 1911, 2542, 635,
            2743, 2977, 148, 3351, 1118, 3239, 3226, 718, 3405, 1055, 639, 375,
            1986, 615, 576, 3246, 3595, 699, 82, 2163, 1581, 1891, 1551, 1785,
            2387, 1736, 2946, 1676, 1914, 1801, 3028, 2727, 713, 1099, 2878,
            1702, 2440, 1776, 601, 2138, 1833, 511, 2635, 1899, 3323, 3395, 2711,
            146, 1922, 981, 2006, 2902, 2389, 824, 36, 2016, 2263, 976, 946,
            1228, 1644, 2360, 1150, 1594, 1085, 423, 367, 1577, 1481, 2911, 3020,
            1535, 1544, 2640, 1375, 1022, 2128, 2543, 216, 3155, 791, 1458, 2637,
            484, 2759, 2540, 3074, 401, 72, 2921, 3055, 2800, 368, 2615, 2733,
            17, 2482, 1923, 2015, 2445, 3325, 1274, 219, 2098, 851, 2514, 1938,
            777, 948, 2272, 3436, 195, 2509, 2867, 3178, 720, 503, 679, 820,
            2641, 3462, 51, 1812, 2799, 3305, 971, 2269, 380, 350};
    constexpr size_t sample_sz = sizeof(sample) / sizeof(sample[0]);
    constexpr size_t batch_sz = 31;
    static_assert(sample_sz % batch_sz == 0, "The data size should be a multiple of the batch size");
    std::pair<int64_t, int64_t> batch[batch_sz];

    for(size_t i = 0; i < sample_sz / batch_sz; i++){
        for(size_t j = 0; j < batch_sz; j++){
            int64_t key = sample[i * batch_sz + j];
            batch[j].first = key;
            batch[j].second = key * 100;
        }

        tree.load(batch, batch_sz);
        REQUIRE(tree.size() == batch_sz * (i+1));
    }

    // validate that all elements have been inserted
    REQUIRE(tree.size() == sample_sz);
    for(size_t key = 1; key <= sample_sz; key++){
        auto value = tree.find(key);
        REQUIRE(value == key * 100);
    }
}

TEST_CASE("sum"){
    initialise();
    using Implementation = BTreePMACC5;
    shared_ptr<Implementation> implementation{ new Implementation{8} };

//    size_t sz = 64;
//    for(size_t i = 1; i <= sz; i++){
//        implementation->insert(i, i * 10);
//    }

    // a permutation of the numbers between 1 and 1033
    int64_t sample[] = {543, 805, 74, 79, 250, 685, 580, 447, 86, 116, 299, 122, 1028, 769,
            976, 702, 126, 353, 381, 888, 374, 822, 77, 139, 991, 986, 407, 259,
            905, 183, 98, 286, 15, 360, 242, 924, 331, 919, 175, 33, 3, 435, 506,
            372, 516, 815, 594, 748, 852, 860, 659, 990, 310, 1004, 497, 345,
            614, 303, 526, 632, 394, 401, 972, 964, 671, 49, 933, 9, 679, 903,
            662, 863, 899, 209, 645, 365, 975, 755, 841, 366, 747, 461, 923, 699,
            980, 796, 438, 1019, 636, 112, 697, 655, 240, 158, 935, 878, 994,
            408, 1030, 517, 129, 724, 551, 498, 600, 673, 604, 456, 695, 224,
            376, 17, 648, 323, 823, 713, 117, 450, 589, 23, 694, 913, 134, 267,
            609, 762, 814, 12, 11, 227, 618, 81, 16, 235, 615, 654, 95, 1023,
            579, 606, 334, 807, 458, 828, 352, 206, 371, 111, 775, 464, 746, 165,
            586, 857, 812, 793, 94, 43, 889, 170, 71, 383, 1015, 477, 448, 953,
            308, 395, 593, 318, 432, 29, 239, 205, 123, 521, 522, 55, 154, 361,
            612, 959, 504, 880, 869, 625, 251, 667, 216, 797, 798, 476, 453, 825,
            624, 405, 851, 128, 194, 375, 133, 813, 722, 977, 399, 363, 145, 682,
            119, 473, 930, 562, 764, 967, 234, 678, 338, 605, 215, 868, 367, 786,
            90, 38, 162, 136, 558, 496, 248, 84, 463, 581, 651, 75, 290, 411,
            354, 417, 602, 737, 311, 195, 966, 391, 518, 767, 93, 57, 564, 416,
            356, 350, 220, 811, 948, 4, 916, 835, 849, 243, 177, 288, 474, 954,
            277, 268, 6, 35, 137, 1003, 125, 293, 779, 816, 565, 629, 337, 887,
            494, 182, 124, 788, 283, 621, 834, 444, 479, 539, 54, 931, 818, 327,
            21, 771, 336, 428, 58, 40, 475, 409, 776, 355, 932, 709, 845, 89,
            359, 893, 885, 507, 595, 1020, 120, 820, 657, 821, 870, 388, 683,
            908, 140, 324, 985, 901, 840, 696, 396, 961, 672, 965, 530, 951, 442,
            50, 937, 853, 1, 457, 426, 304, 871, 263, 343, 576, 731, 315, 1021,
            873, 368, 941, 511, 617, 791, 262, 78, 377, 664, 829, 830, 460, 649,
            751, 768, 468, 691, 92, 386, 992, 258, 317, 616, 537, 484, 877, 152,
            45, 270, 236, 275, 431, 47, 499, 859, 803, 726, 445, 525, 218, 725,
            599, 100, 141, 989, 106, 918, 715, 533, 400, 563, 710, 910, 443, 690,
            217, 341, 228, 712, 890, 626, 592, 495, 25, 1001, 446, 906, 166, 393,
            650, 244, 720, 349, 153, 552, 1002, 392, 513, 64, 862, 781, 684, 716,
            284, 281, 601, 385, 173, 635, 997, 900, 210, 634, 200, 437, 429, 570,
            414, 280, 316, 757, 264, 883, 1018, 707, 157, 717, 557, 515, 766,
            742, 603, 692, 1009, 677, 178, 266, 760, 864, 466, 109, 455, 652,
            898, 981, 736, 837, 936, 85, 572, 993, 127, 911, 333, 184, 675, 528,
            674, 307, 510, 362, 826, 824, 150, 151, 488, 598, 465, 289, 608, 643,
            312, 1005, 167, 232, 896, 199, 172, 330, 642, 1031, 514, 665, 87,
            246, 817, 238, 97, 378, 640, 568, 193, 204, 138, 744, 535, 287, 469,
            656, 291, 357, 915, 7, 756, 783, 66, 879, 960, 348, 255, 529, 31,
            221, 547, 189, 44, 384, 571, 962, 810, 459, 963, 83, 110, 14, 329,
            1006, 418, 790, 597, 619, 1007, 279, 800, 186, 104, 256, 5, 53, 269,
            56, 647, 872, 855, 774, 523, 897, 895, 440, 838, 831, 987, 508, 926,
            984, 27, 582, 276, 26, 765, 114, 633, 542, 519, 588, 861, 301, 858,
            390, 761, 847, 943, 978, 403, 2, 76, 135, 1013, 24, 82, 561, 693,
            921, 721, 425, 728, 653, 548, 912, 503, 105, 427, 321, 502, 758, 549,
            666, 196, 88, 52, 819, 41, 143, 292, 983, 934, 836, 480, 688, 223,
            265, 101, 389, 198, 213, 591, 844, 118, 947, 300, 611, 806, 638, 566,
            550, 708, 839, 380, 260, 909, 369, 146, 569, 532, 644, 161, 925, 340,
            107, 231, 754, 785, 956, 646, 792, 433, 103, 322, 610, 387, 18, 866,
            65, 10, 876, 802, 491, 1032, 296, 854, 434, 735, 843, 833, 531, 113,
            740, 749, 714, 658, 698, 147, 623, 59, 99, 168, 319, 1024, 174, 298,
            160, 573, 902, 988, 917, 554, 534, 320, 778, 946, 422, 130, 730, 48,
            1014, 732, 939, 622, 982, 734, 470, 998, 211, 607, 430, 711, 254,
            784, 449, 185, 285, 28, 505, 574, 197, 297, 567, 342, 22, 544, 187,
            132, 865, 486, 979, 920, 1026, 108, 809, 230, 436, 782, 439, 326,
            344, 192, 536, 1017, 306, 750, 102, 538, 875, 493, 703, 886, 180,
            928, 927, 670, 804, 729, 957, 904, 585, 745, 358, 272, 179, 527, 949,
            524, 273, 481, 958, 639, 164, 867, 881, 313, 181, 364, 63, 462, 1011,
            892, 191, 1012, 471, 950, 91, 328, 441, 67, 739, 247, 973, 596, 669,
            613, 741, 641, 73, 482, 995, 19, 970, 590, 555, 808, 346, 660, 148,
            294, 397, 155, 706, 668, 794, 752, 188, 974, 131, 1033, 229, 556,
            339, 631, 249, 62, 546, 219, 309, 34, 1025, 509, 208, 176, 743, 545,
            225, 676, 424, 121, 489, 347, 413, 332, 237, 302, 780, 795, 938, 472,
            850, 575, 553, 305, 214, 421, 907, 1027, 914, 929, 689, 630, 60, 351,
            1008, 945, 370, 222, 500, 955, 540, 20, 763, 190, 520, 212, 8, 1010,
            490, 587, 884, 325, 13, 252, 382, 874, 39, 968, 687, 163, 492, 856,
            373, 202, 637, 80, 952, 415, 680, 801, 169, 1029, 753, 583, 940, 46,
            922, 423, 70, 770, 335, 30, 999, 282, 541, 245, 1016, 142, 487, 257,
            419, 261, 404, 36, 68, 37, 944, 271, 274, 559, 759, 894, 467, 772,
            584, 96, 777, 485, 560, 512, 233, 406, 149, 718, 483, 799, 115, 686,
            705, 451, 842, 882, 156, 1000, 848, 846, 454, 207, 295, 51, 478, 32,
            663, 891, 628, 420, 72, 789, 701, 203, 727, 996, 241, 410, 971, 620,
            69, 452, 501, 661, 226, 827, 719, 201, 773, 159, 704, 942, 171, 738,
            398, 577, 42, 61, 723, 379, 700, 402, 253, 278, 832, 412, 578, 314,
            681, 969, 144, 1022, 787, 627, 733};
    int64_t sz = sizeof(sample) / sizeof(sample[0]); // 1033
    for(size_t i = 0; i < sz; i++){
        implementation->insert(sample[i], sample[i] * 10);
    }

    implementation->build();
    REQUIRE(implementation->size() == sz);

//    implementation->dump();

    for(size_t i = 0; i <= sz + 1; i++){
        for(size_t j = i; j <= sz + 2; j++){
            auto sum = implementation->sum(i, j);
//            cout << "RANGE [" << i << ", " << j << "] result: " << sum << endl;

            if(j <= 0 || i > sz){
                REQUIRE(sum.m_num_elements == 0);
                REQUIRE(sum.m_sum_keys == 0);
                REQUIRE(sum.m_sum_values == 0);
            } else {
                int64_t vmin = std::max<int64_t>(1, i);
                int64_t vmax = std::min<int64_t>(sz, j);

                REQUIRE(sum.m_first_key == vmin);
                REQUIRE(sum.m_last_key == vmax);
                REQUIRE(sum.m_num_elements == (vmax - vmin +1));
                auto expected_sum = /* sum of the first vmax numbers */ (vmax * (vmax +1) /2) - /* sum of the first vmin -1 numbers */ ((vmin -1) * vmin /2);
                REQUIRE(sum.m_sum_keys == expected_sum);
                REQUIRE(sum.m_sum_values == expected_sum * 10);
            }
        }
    }
}
